#include "Base_info_Detect.hpp"


#define HASH_LENGTH 16


std::string BasicInfo::generateRandomString(int length) {
    const std::string charset = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
    std::string result;
    result.reserve(length);

    for (int i = 0; i < length; ++i) {
        result += charset[rand() % charset.length()];
    }
    return result;
}



std::wstring BasicInfo::getComputerName() {
    wchar_t buffer[15 + 1];
    DWORD size = sizeof(buffer) / sizeof(buffer[0]);

    if (!GetComputerNameW(buffer, &size)) {
        std::cerr << "GetComputerNameW failed with error: " << GetLastError() << std::endl;
        return L"Unknown";
    }

    return buffer;
}

std::string BasicInfo::getOSVersion() {
    if (IsWindows10OrGreater()) {
        return "Windows 10 or later";
    }
    else if (IsWindows8Point1OrGreater()) {
        return "Windows 8.1";
    }
    else if (IsWindows8OrGreater()) {
        return "Windows 8";
    }
    else if (IsWindows7OrGreater()) {
        return "Windows 7";
    }
    else if (IsWindowsVistaOrGreater()) {
        return "Windows Vista";
    }
    else if (IsWindowsXPOrGreater()) {
        return "Windows XP";
    }
    else {
        return "Unknown";
    }
}

std::string BasicInfo::getProcessorArchitecture() {
    SYSTEM_INFO sysInfo;
    GetSystemInfo(&sysInfo);

    switch (sysInfo.wProcessorArchitecture) {
    case PROCESSOR_ARCHITECTURE_AMD64:
        return "x64";
    case PROCESSOR_ARCHITECTURE_ARM:
        return "ARM";
    case PROCESSOR_ARCHITECTURE_IA64:
        return "IA64";
    case PROCESSOR_ARCHITECTURE_INTEL:
        return "x86";
    default:
        return "Unknown";
    }
}

void BasicInfo::getBasicInfo() {
    osVersion = getOSVersion();
    processorArchieture = getProcessorArchitecture();
    computerName = getComputerName();
    HashIdentifier = generateRandomString(HASH_LENGTH);
    
}

